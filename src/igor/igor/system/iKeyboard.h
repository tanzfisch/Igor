//
//   ______                                |\___/|  /\___/\
//  /\__  _\                               )     (  )     (
//  \/_/\ \/       __      ___    _ __    =\     /==\     /=
//     \ \ \     /'_ `\   / __`\ /\`'__\    )   (    )   (
//      \_\ \__ /\ \L\ \ /\ \L\ \\ \ \/    /     \   /   \
//      /\_____\\ \____ \\ \____/ \ \_\   |       | /     \
//  ____\/_____/_\/___L\ \\/___/___\/_/____\__  _/__\__ __/________________
//                 /\____/                   ( (       ))
//                 \_/__/  game engine        ) )     ((
//                                           (_(       \)
// (c) Copyright 2012-2020 by Martin Loga
//
// This library is free software; you can redistribute it and or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 3 of the License, or (at
// your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.If not, see <http://www.gnu.org/licenses/>.
//
// contact: igorgameengine@protonmail.com

#ifndef __iKEYBOARD__
#define __iKEYBOARD__

#include <igor/system/iWindow.h>
#include <igor/system/iOSEventListener.h>

#include <iaux/system/iaEvent.h>

namespace igor
{
	class iKeyboardImpl;

	/*! key down event

	will be called for a specific single key
	*/
	iaEVENT(iKeyDownSpecificEvent, iKeyDownSpecificDelegate, void, (), ());

	/*! key up event

    will be called for a specific single key
    */
	iaEVENT(iKeyUpSpecificEvent, iKeyUpSpecificDelegate, void, (), ());

	/*! key down event ext

	will be called for every key
	*/
	iaEVENT(iKeyDownEvent, iKeyDownDelegate, void, (iKeyCode key), (key));

	/*! key up event ext

	will be called for every key
	*/
	iaEVENT(iKeyUpEvent, iKeyUpDelegate, void, (iKeyCode key), (key));

	/*! ASCII stream event

	will be called every time a ascii value was generated by the keyboard driver
	*/
	iaEVENT(iKeyASCIIEvent, iKeyASCIIDelegate, void, (char c), (c));

	/*! Handles windows events and triggers Igor events.

	\todo unstable and incomplete
	\todo this is not yet working right. problems start the moment you press more than one button at a time
	*/
	class Igor_API iKeyboard : public iOSEventListener, public iaSingleton<iKeyboard>
	{

		friend class iaSingleton<iKeyboard>;

	public:
		/*! register delegate to key down event

		\param keyDownDelegate the delegate to register
		\param key key the event is triggered by
		*/
		void registerKeyDownDelegate(iKeyDownSpecificDelegate keyDownDelegate, iKeyCode key);

		/*! unregister delegate from key down event with a specified key

		\param keyDownDelegate the delegate to remove
		\param key the event was triggered by
		*/
		void unregisterKeyDownDelegate(iKeyDownSpecificDelegate keyDownDelegate, iKeyCode key);

		/*! register delegate to key up event

		\param keyUpDelegate the delegate to register
		\param key key the event is triggered by
		*/
		void registerKeyUpDelegate(iKeyUpSpecificDelegate keyUpDelegate, iKeyCode key);

		/*! unregister delegate from key up event with a specified key

		\param keyUpDelegate the delegate to unregister
		\param key the event was triggered by
		*/
		void unregisterKeyUpDelegate(iKeyUpSpecificDelegate keyUpDelegate, iKeyCode key);

		/*! register delegate to key down event extended

		\param keyDownDelegate the delegate to register

		delegate will be called for any key event
		*/
		void registerKeyDownDelegate(iKeyDownDelegate keyDownDelegate);

		/*! unregister delegate from any key down event

		\param keyDownDelegate the delegate to unregister
		*/
		void unregisterKeyDownDelegate(iKeyDownDelegate keyDownDelegate);

		/*! register delegate to key up event extended

		\param keyUpDelegate the delegate to register

		delegate will be called for any key event
		*/
		void registerKeyUpDelegate(iKeyUpDelegate keyUpDelegate);

		/*! unregister delegate from any key up event

		\param keyUpDelegate the delegate to unregister
		*/
		void unregisterKeyUpDelegate(iKeyUpDelegate keyUpDelegate);

		/*! register delegate to the keyboard ASCII output event

		\param keyASCIIDelegate the delegate to register
		*/
		void registerKeyASCIIDelegate(iKeyASCIIDelegate keyASCIIDelegate);

		/*! unregister delegate from the keyboard ASCII output event

		\param keyASCIIDelegate the delegate to unregister
		*/
		void unregisterKeyASCIIDelegate(iKeyASCIIDelegate keyASCIIDelegate);

		/*! \returns true: if a specified key is pressed; false if the specified key is not pressed

        you should not use that. better style is to use events

        \param keyCode the specified key
        */
		bool getKey(iKeyCode keyCode);

		/*! \returns true: if any key is pressed; false: if no key is pressed

        you should not use that. better style is to use events
        */
		bool keyPressed();

		/*! returns key code

		\param keycode key name
		\return key code
		*/
		static iKeyCode getKeyCode(const iaString &keyname);

		/*! \retruns pointer to corresponding window
		if it returns nullptr the listener was not registred to a window yet
		*/
		iWindow *getWindow() const override;

	private:
		/*! pimpl
		*/
		iKeyboardImpl *_impl = nullptr;

		/*! called by a window if an os event occours
		*/
		bool onOSEvent(const void *data) override;

		/*! does what ever necessairy to get the device running

		\param window handle to the window
		\param data os specific data (see iOSEventregisterData)
		*/
		bool initDevice(const void *data) override;

		/*! unregisters device from listening
		*/
		void deinitDevice() override;

		/*! initializes member variables
		*/
		iKeyboard();

		/*! releases all delegates if not done by application
		*/
		virtual ~iKeyboard();
	};

	/*! \example Keyboard/src/KeyboardExample.cpp
    Keyboard usage example.

    \include Keyboard/src/KeyboardExample.h
    */

	/*! stream operator

	\param stream the destination
	\param keyCode the key code to print
	\returns the resulting stream
	*/
	Igor_API std::wostream &operator<<(std::wostream &stream, const iKeyCode &keyCode);

}; // namespace igor

#endif
